* Folder structure
** Index.html (now .markdown)
*** New index.markdown
has very little text, just *YAML frontmatter*
----
layout: home
----

*** Old index has structure

---
# Feel free to add content and custom Front Matter to this file.
# To modify the layout, see https://jekyllrb.com/docs/themes/#overriding-theme-defaults

layout: default
---

<div class="home">
    <h1 class="page-heading">Posts!!!</h1>
    <ul class="post-list">
        {% for post in site.posts %}            <li>
                <span class="post-meta">{{ post.date | date: "%b %-d, %Y" }}</span>
                <h2>
                    <a class="post-link" href="{{ post.url | prepend: site.baseurl }}">{{ post.title }}</a>
                </h2>
            </li>
        {% endfor %}
    </ul>

    <p class="rss-subscribe">subscribe <a href="{{ "/feed.xml" | prepend: site.baseurl }}">via RSS</a></p>
</div>
** YAML frontmatter
https://jekyllrb.com/docs/front-matter/
*** layout
*** title
*** permalink
*** 
** layouts
https://jekyllrb.com/docs/step-by-step/04-layouts/
had to copy from the tutorial as it's missing they are locted in _layouts
data is first rendered from index > then from the layouts
*** Now jekyll puts the layouts inside themes
(jekyll) % conda install -c conda-forge c-compiler compilers cxx-compiler
(jekyll) % conda install -c conda-forge ruby
(jekyll) % gem install jekyll bundler
(jekyll) % pushd $HOME/opt/anaconda3/envs/jekyll/share/rubygems/bin
(jekyll) % ln -s $HOME/opt/anaconda3/envs/jekyll/bin/ruby .
(jekyll) % popd
(jekyll) % bundle install
(jekyll) % bundle exec jekyll serve --incremental
*** 4 main layouts
stored inside the theme, had to copy here
gets priority *before* theme's settings
page and post have their own *content*, which then  becomes *content* for default layout
**** default.html
<!DOCTYPE html>
<html lang="{{ page.lang | default: site.lang | default: "en" }}">
  {%- include head.html -%}
  <body>
    {%- include header.html -%}
    <main class="page-content" aria-label="Content">
      <div class="wrapper">
        {{ content }}
      </div>
    </main>
    {%- include footer.html -%}
  </body>
</html>

**** page.html
---
layout: default
---
<article class="post">

  <header class="post-header">
    <h1 class="post-title">{{ page.title | escape }}</h1>
  </header>

  <div class="post-content">
    {{ content }}
  </div>

</article>

**** post.html
has slightly more info than a page
---
layout: default
---
<article class="post h-entry" itemscope itemtype="http://schema.org/BlogPosting">

  <header class="post-header">
    <h1 class="post-title p-name" itemprop="name headline">{{ page.title | escape }}</h1>
    <p class="post-meta">
      <time class="dt-published" datetime="{{ page.date | date_to_xmlschema }}" itemprop="datePublished">
        {%- assign date_format = site.minima.date_format | default: "%b %-d, %Y" -%}
        {{ page.date | date: date_format }}
      </time>
      {%- if page.author -%}
        â€¢ <span itemprop="author" itemscope itemtype="http://schema.org/Person"><span class="p-author h-card" itemprop="name">{{ page.author }}</span></span>
      {%- endif -%}</p>
  </header>

  <div class="post-content e-content" itemprop="articleBody">
    {{ content }}
  </div>

  {%- if site.disqus.shortname -%}
    {%- include disqus_comments.html -%}
  {%- endif -%}

  <a class="u-url" href="{{ page.url | relative_url }}" hidden></a>
</article>
**** home.html

** Liquid templating tags
*** |
**** page.title | escape 
**** post.url | prepend: site.baseurl
**** post.date | date: "%b %-d, %Y"
**** "/feed.xml" | prepend: site.baseurl
*** escape
found inside page and post layouts, seems to be useful for nested *content* usage
*** include
*** content
present inside layouts. All data of the file that calls a layout (except for YAML frontmatter) is loaded here.
*** for <> endfor
*** date
****  "%b %-d, %Y"
*** post
****  post.date
****  post.url
**** post.title
*** site
**** site.posts
**** site.baseurl
** _site
content generated by jekyll
*** index.html
we can see the injected/compiled content here 
** _includes
we could put additional includes here
special directory containing files for the *include* *Liquid tag*
tutorial just has header.html footer.html and head.html
currently there are much more files.
** _posts
one post in Markdown format
Markdown is going to be compiled into html
*** YAML frontmatter
custom metadata could be added
**** layout
**** title
**** date
**** categories
*** Markdown content
** _sass
language for css
used for styling
breaks styles into 3 specific chunks
tutorial has 3 sass partials: _base.scss, _layout.scss, _syntax-highliting.scss
I also have those but inside the minima subfolder + minima.scss above it
*** variables in sass language
so we don't have to remember values and could use them throughout for example:
$base-font-size:   16px !default;
*** _base
*** minima.scss
we specify variables, and import all other partials before compiling
tutorial has a *css* forlder with main.scss
I got this file as _sass/minima.scss
minima.scss = main.scss
** _site
compiled site
** _config.yaml
stores global config settings/global variables
** about.md
similar to post, but uses page layout.
Pages are not stored in a folder like posts are
*** YAML frontmatter
**** layout
**** title
**** permalink: /about/
*** Markdown content
** feed.xml
used for RSS subscription
* Planning
design file was made in photoshop
* Configuration & settings
** _config.yml
edited some general settings
*** added permalink settings
encodes the structure of urls
permalink: /:categories/:title
*** edited how *pages* are added to navigation
inside header.html include it adds every page to navigation
the tuorial has a simpler version
        <div class="trigger">
          {%- for path in page_paths -%}
            {%- assign my_page = site.pages | where: "path", path | first -%}
            {%- if my_page.title -%}
            <a class="page-link" href="{{ my_page.url | relative_url }}">{{ my_page.title | escape }}</a>
            {%- endif -%}
          {%- endfor -%}
In the config we create a series of links
links:
  - title: about
    url: /about
  - title: work
    url: /work
  - title: articles
    url: /articles
  - title: hire me
    url: /hire-me
We loop through them, instead than through all pages
* Sass introduction











